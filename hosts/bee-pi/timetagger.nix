# Auto-generated using compose2nix v0.2.1-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."timetagger-timetagger" = {
    image = "ghcr.io/almarklein/timetagger:v23.9.2-nonroot";
    environment = {
      TIMETAGGER_BIND = "0.0.0.0:8030";
      TIMETAGGER_CREDENTIALS = "atarbinian:$2a$08$dnvtuebZQcSW078bwhJ8luOJO2YxXKZRzt4Jy6XVZfirey.c9wgom";
      TIMETAGGER_DATADIR = "/opt/_timetagger";
      TIMETAGGER_LOG_LEVEL = "info";
    };
    volumes = [
      "/data/timetagger/:/opt/_timetagger:rw"
    ];
    ports = [
      "8030:8030/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=timetagger"
      "--network=timetagger_default"
    ];
  };
  systemd.services."docker-timetagger-timetagger" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "docker-network-timetagger_default.service"
    ];
    requires = [
      "docker-network-timetagger_default.service"
    ];
    partOf = [
      "docker-compose-timetagger-root.target"
    ];
    wantedBy = [
      "docker-compose-timetagger-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-timetagger_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f timetagger_default";
    };
    script = ''
      docker network inspect timetagger_default || docker network create timetagger_default
    '';
    partOf = [ "docker-compose-timetagger-root.target" ];
    wantedBy = [ "docker-compose-timetagger-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-timetagger-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
